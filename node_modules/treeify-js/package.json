{
  "_from": "treeify-js",
  "_id": "treeify-js@1.0.3",
  "_inBundle": false,
  "_integrity": "sha512-EozN8yjrxbS6VwYMzzv7QK5yR9m/Q4zzt5c5+Os/Rojz1UHZkGbHMZcRBiWa6dvTwYKZCthKpCF6zK77K9BnXw==",
  "_location": "/treeify-js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "treeify-js",
    "fetchSpec": "latest",
    "name": "treeify-js",
    "raw": "treeify-js",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/treeify-js/-/treeify-js-1.0.3.tgz",
  "_shasum": "f8cbb648fbf1c730d101467de96dddf93ae3a7ce",
  "_spec": "treeify-js",
  "_where": "P:\\PROJECTS\\Komisi Yudisial\\SIMPEG\\WebService",
  "author": {
    "email": "mwc@foxmail.com",
    "name": "maowenchao",
    "url": "https://wenchao.org"
  },
  "bugs": {
    "url": "https://github.com/mwc/treeify/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Convert an array to a tree object.",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-es2015": "^6.24.1",
    "benchmark": "^2.1.4",
    "chai": "^4.1.2",
    "eslint": "^4.19.1",
    "gulp": "^3.9.1",
    "gulp-babel": "^7.0.1",
    "gulp-mocha": "^5.0.0",
    "gulp-rollup": "^2.16.2",
    "gulp-uglify": "^3.0.2",
    "rollup": "^1.10.0"
  },
  "directories": {
    "example": "examples"
  },
  "files": [
    "dist/treeify.js"
  ],
  "homepage": "https://github.com/mwc/treeify#readme",
  "keywords": [
    "array",
    "array to tree",
    "convert",
    "tree",
    "treeify"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "treeify-js",
  "optionalDependencies": {},
  "readme": "\r\ntreeify.js - v1.0.3（under MIT）\r\n===============================\r\n\r\nWhat's treeify?\r\n---------------\r\n`treeify.js` is a tool for converting an array which each element contains the same specific rules into an object.\r\n\r\nWhat's New in v1.0.3?\r\n---------------------\r\n- In addition to the first parameter, the other parameters of function treeify are replace by an `object`.\r\n- Add `untreeify()` to convert a tree comes from `treeify()` back into an array.\r\n  `untreeify()` is the inverse of `treeify()`.\r\n- Add `unit tests`\r\n\r\nInstallation\r\n------------\r\n```cmd\r\n$ npm install --save-dev treeify-js\r\n```\r\n\r\nBuild & Test\r\n------------\r\nPackages `gulp` and `mocha` should already be installed globally.\r\nYou should also run `$ npm install` first to install all dependencies.\r\n\r\nRun the `build` script to build, and the `test` script to run unit test.\r\n\r\n\r\n```cmd\r\n$ npm run build\r\n```\r\n\r\nUsage\r\n-----\r\n\r\nSo, now we have an array:\r\n\r\n\r\n```javascript\r\n\r\nvar arr = [\r\n    {\r\n        id: 'a1',\r\n        parentId: 'a'\r\n    },\r\n    {\r\n        id: 'aq',\r\n        parentId: 'a2'\r\n    },\r\n    {\r\n        id: 'a2',\r\n        parentId: 'a'\r\n    },\r\n    {\r\n        id: 'a1-1',\r\n        parentId: 'a1'\r\n    },\r\n    {\r\n        id: 'a',\r\n        parentId: ''\r\n    }\r\n];\r\n```\r\n\r\nThen, You need to convert to such a tree object:\r\n\r\n```javascript\r\n\r\n    {\r\n        id: 'a',\r\n        parentId: '',\r\n        children: [\r\n            {\r\n                id: 'a1',\r\n                parentId: 'a',\r\n                children: [\r\n                    {\r\n                        id: 'a1-1',\r\n                        parentId: 'a1',\r\n                        children: []\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                id: 'a2',\r\n                parentId: 'a',\r\n                children: [\r\n                    {\r\n                        id: 'aq',\r\n                        parentId: 'a2',\r\n                        children: []\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n    \r\n```\r\n\r\nYou just need to give the array to treeify:\r\n\r\n```javascript\r\ntreeify(arr);\r\n```\r\n\r\nThen, you get what you want, It's an easy work.\r\n\r\nCheck the **`unit tests`** to get more usage.\r\n\r\nEnjoy!\r\n\r\nAPI\r\n---\r\n+ **treeify(data, configure)**\r\n\r\n\tConvert an array to a tree object. An array which as data source, all element of it must be an object that has an unique ID and a parent's ID.\r\n\r\n\t- `data` *Array* - Give a data which Array type to treeify\r\n\t- `configure` *Object* - A Object that Configure keys name mapping in convertion. The most common usage is no any configuration, just give the data along.\r\n\t\t* `id`: *string|Function* - default value is \"id\".\r\n\t\t* `parentId`: *string|Function* - default value is \"parentId\".\r\n\t\t* `children`: *string|Function* - default value is \"children\".\r\n\t\t* `root`: *any type* - specify a value directly, the value can be any type, if return a value which an array type, it means 'contains', such as { root: () => [\"xxxx\"] }, it is the same as { root: () => \"xxxx\" } if only one value is returned. default value is null.\r\n\t\t* `multi`: *boolean* - If the 'multi' is set * to TRUE, it can have multiple roots, FALSE can only have one, default value is false.\r\n\t\t* `deepClone`: *boolean* - Whether deep clone all elements of data in convert, default value is false.\r\n\r\n+ **untreeify(tree, childrenName)**\r\n\r\n\tConvert a tree from treeify() back into an array. This is the inverse of treeify.\r\n\r\n\t- `tree` *Object* - A tree comes from treeify\r\n\t- `childrenName` *String|Function* - Give the children's key name, it can also be a function. default value is **\"children\"**\r\n\r\n\r\nLicense\r\n--------\r\ntreeify is under MIT licensed.",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mwc/treeify.git"
  },
  "scripts": {
    "build": "gulp",
    "test": "gulp test"
  },
  "version": "1.0.3"
}
