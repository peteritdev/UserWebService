{
  "_from": "date-and-time@^0.8.1",
  "_id": "date-and-time@0.8.1",
  "_inBundle": false,
  "_integrity": "sha512-p1d0c3HE7bJK4m3/TcNx7EFZcq0Jyvl05TWeESfC5FsJQVRlUrYAL7rB7NEPogx9C3rKsOZJn9PELYo9jVT7mw==",
  "_location": "/date-and-time",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "date-and-time",
    "fetchSpec": "^0.8.1",
    "name": "date-and-time",
    "raw": "date-and-time@^0.8.1",
    "rawSpec": "^0.8.1",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/date-and-time/-/date-and-time-0.8.1.tgz",
  "_shasum": "cd7d03b06bc68eb16977850a3f7a5ac7c1a643d3",
  "_spec": "date-and-time@^0.8.1",
  "_where": "P:\\PROJECTS\\Komisi Yudisial\\SIMPEG\\WebService",
  "author": {
    "name": "KNOWLEDGECODE"
  },
  "bugs": {
    "url": "https://github.com/knowledgecode/date-and-time/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A Minimalist DateTime utility for Node.js and the browser",
  "devDependencies": {
    "babel-preset-env": "^1.7.0",
    "babelify": "^7.3.0",
    "browserify": "^14.5.0",
    "expect.js": "^0.3.1",
    "mocha": "^5.2.0",
    "mocha-phantomjs-core": "^2.1.2",
    "phantomjs-prebuilt": "^2.1.16"
  },
  "homepage": "https://github.com/knowledgecode/date-and-time",
  "keywords": [
    "date",
    "format",
    "parse",
    "time",
    "utility"
  ],
  "license": "MIT",
  "main": "date-and-time.js",
  "name": "date-and-time",
  "optionalDependencies": {},
  "readme": "# date-and-time\n[![Circle CI](https://circleci.com/gh/knowledgecode/date-and-time.svg?style=shield)](https://circleci.com/gh/knowledgecode/date-and-time)  \n\n## What\nThis library is just a function collection for manipulation of date and time. It's tiny, simple, easy to learn.\n\n## Why\nBecause JS modules nowadays are getting more huge and complex, and there are many dependencies. Trying to keep simple and small each module is meaningful.\n\n## Features\n- Minimalist. Less than 2k. (minified and gzipped)\n- Universal (Isomorphic)\n- Multi language support\n- Not extending built-in Date object\n- Old browser support. It even works on IE6\n\n## Install\nvia npm:\n```shell\n$ npm install date-and-time --save\n```\nvia Bower (DEPRECATED):\n```shell\n$ bower install date-and-time\n```\ndirectly:\n```html\n<script src=\"date-and-time.min.js\"></script>\n```\n\n## Changes\n- 0.8.0 (Parser Update)\n    - The `parse()` has become to return `Invalid Date` instead of `NaN` when parsing is failure (**Breaking Change**).\n    - Added `preparse()`. It returns a Date Structure.\n    - The `isValid()` has become to take a Date Structure in addition to a date string.\n    - The `isLeapYear()` has become to take a year (number type) instead of a Date object (**Breaking Change**).\n\n- 0.7.0\n    - Added Danish support\n\n## Usage\nNode.js:\n```javascript\nconst date = require('date-and-time');\n```\nBabel:\n```javascript\nimport date from 'date-and-time';\n```\nAMD:\n```javascript\nrequire(['date-and-time'], function (date) {\n});\n```\nBrowser:\n```javascript\nwindow.date;    // global object\n```\n\n## API\n\n### format(dateObj, formatString[, utc])\n*Formatting a date*\n- @param {**Date**} dateObj - a Date object\n- @param {**string**} formatString - a format string\n- @param {**boolean**} [utc] - output as UTC\n- @returns {**string**} a formatted string\n\n```javascript\nconst now = new Date();\ndate.format(now, 'YYYY/MM/DD HH:mm:ss');    // => '2015/01/02 23:14:05'\ndate.format(now, 'ddd MMM DD YYYY');        // => 'Fri Jan 02 2015'\ndate.format(now, 'hh:mm A [GMT]Z');         // => '11:14 p.m. GMT-0800'\ndate.format(now, 'hh:mm A [GMT]Z', true);   // => '07:14 a.m. GMT+0000'\n```\n\n| token        | meaning     | example           |\n|:-------------|:------------|:------------------|\n| YYYY         | year        | 0999, 2015        |\n| YY           | year        | 15, 99            |\n| Y            | year        | 999, 2015         |\n| MMMM         | month       | January, December |\n| MMM          | month       | Jan, Dec          |\n| MM           | month       | 01, 12            |\n| M            | month       | 1, 12             |\n| DD           | day         | 02, 31            |\n| D            | day         | 2, 31             |\n| dddd         | day of week | Friday, Sunday    |\n| ddd          | day of week | Fri, Sun          |\n| dd           | day of week | Fr, Su            |\n| HH           | 24-hour     | 23, 08            |\n| H            | 24-hour     | 23, 8             |\n| A            | meridiem    | a.m., p.m.        |\n| hh           | 12-hour     | 11, 08            |\n| h            | 12-hour     | 11, 8             |\n| mm           | minute      | 14, 07            |\n| m            | minute      | 14, 7             |\n| ss           | second      | 05, 10            |\n| s            | second      | 5, 10             |\n| SSS          | millisecond | 753, 022          |\n| SS           | millisecond | 75, 02            |\n| S            | millisecond | 7, 0              |\n| Z            | timezone    | +0100, -0800      |\n\n#### NOTE 1. Comments\nStrings in parenthese `[...]` in the `formatString` will be ignored as comments:\n\n```javascript\ndate.format(new Date(), 'DD-[MM]-YYYY');    // => '02-MM-2015'\ndate.format(new Date(), '[DD-[MM]-YYYY]');  // => 'DD-[MM]-YYYY'\n```\n\n---\n\n### parse(dateString, formatString[, utc])\n*Parsing a date string*\n- @param {**string**} dateString - a date string\n- @param {**string**} formatString - a format string\n- @param {**boolean**} [utc] - input as UTC\n- @returns {**Date**} a constructed date\n\n```javascript\ndate.parse('2015/01/02 23:14:05', 'YYYY/MM/DD HH:mm:ss');   // => Jan 2 2015 23:14:05 GMT-0800\ndate.parse('02-01-2015', 'DD-MM-YYYY');                     // => Jan 2 2015 00:00:00 GMT-0800\ndate.parse('11:14:05 p.m.', 'hh:mm:ss A');                  // => Jan 1 1970 23:14:05 GMT-0800\ndate.parse('11:14:05 p.m.', 'hh:mm:ss A', true);            // => Jan 1 1970 15:14:05 GMT-0800\ndate.parse('Jam 1 2017', 'MMM D YYYY');                     // => Invalid Date\ndate.parse('Feb 29 2016', 'MMM D YYYY');                    // => Feb 29 2016 00:00:00 GMT-0800\ndate.parse('Feb 29 2017', 'MMM D YYYY');                    // => Invalid Date\n```\n\n| token        | meaning     | example           |\n|:-------------|:------------|:------------------|\n| YYYY         | year        | 2015, 1999        |\n| YY           | year        | 15, 99            |\n| MMMM         | month       | January, December |\n| MMM          | month       | Jan, Dec          |\n| MM           | month       | 01, 12            |\n| M            | month       | 1, 12             |\n| DD           | day         | 02, 31            |\n| D            | day         | 2, 31             |\n| HH           | 24-hour     | 23, 08            |\n| H            | 24-hour     | 23, 8             |\n| hh           | 12-hour     | 11, 08            |\n| h            | 12-hour     | 11, 8             |\n| A            | meridiem    | a.m., p.m.        |\n| mm           | minute      | 14, 07            |\n| m            | minute      | 14, 7             |\n| ss           | second      | 05, 10            |\n| s            | second      | 5, 10             |\n| SSS          | millisecond | 753, 022          |\n| SS           | millisecond | 75, 02            |\n| S            | millisecond | 7, 0              |\n\n#### NOTE 1. Invalid Date\nIf the function fails to parse, it will return `Invalid Date`. Be careful as the `Invalid Date` is a Date object, not `NaN` or `null`. You can tell whether the Date object is invalid as follows:\n\n```javascript\nconst today = date.parse('Jam 1 2017', 'MMM D YYYY');\n\nif (isNaN(today)) {\n    // Failure\n}\n```\n\n#### NOTE 2. Default Date Time\nDefault date is `January 1, 1970`, time is `00:00:00.000`. Not passed values will be replaced with them:\n\n```javascript\ndate.parse('11:14:05 p.m.', 'hh:mm:ss A');  // => Jan 1 1970 23:14:05 GMT-0800\ndate.parse('Feb 2000', 'MMM YYYY');         // => Feb 1 2000 00:00:00 GMT-0800\n```\n\n#### NOTE 3. Max Date / Min Date\nParsable maximum date is `December 31, 9999`, minimum date is `January 1, 0001`.\n\n```javascript\ndate.parse('Dec 31 9999', 'MMM D YYYY');    // => Dec 31 9999 00:00:00 GMT-0800\ndate.parse('Dec 31 10000', 'MMM D YYYY');   // => Invalid Date\n\ndate.parse('Jan 1 0001', 'MMM D YYYY');     // => Jan 1 0001 00:00:00 GMT-0800\ndate.parse('Jan 1 0000', 'MMM D YYYY');     // => Invalid Date\n```\n\n#### NOTE 4. Auto Mapping\nThe `YY` token maps the year 69 or less to 2000s, the year 70 or more to 1900s. Using it is not recommended.\n\n```javascript\ndate.parse('Dec 31 0', 'MMM D YY');     // => Dec 31 2000 00:00:00 GMT-0800\ndate.parse('Dec 31 69', 'MMM D YY');    // => Dec 31 2069 00:00:00 GMT-0800\ndate.parse('Dec 31 70', 'MMM D YY');    // => Dec 31 1970 00:00:00 GMT-0800\ndate.parse('Dec 31 99', 'MMM D YY');    // => Dec 31 1999 00:00:00 GMT-0800\n```\n\n#### NOTE 5. 12-hour notation and Meridiem\nIf use the `hh` or `h` (12-hour) token, use together the `A` (meridiem) token to get the right value.\n\n```javascript\ndate.parse('11:14:05', 'hh:mm:ss');         // => Jan 1 1970 11:14:05 GMT-0800\ndate.parse('11:14:05 p.m.', 'hh:mm:ss A');  // => Jan 1 1970 23:14:05 GMT-0800\n```\n\n#### NOTE 6. Comments\nStrings in parenthese `[...]` in the formatString will be ignored as comments:\n\n```javascript\ndate.parse('12 hours 34 minutes', 'HH hours mm minutes');       // => Invalid Date\ndate.parse('12 hours 34 minutes', 'HH [hours] mm [minutes]');   // => Jan 1 1970 12:34:00 GMT-0800\n```\n\nA white space works as a wild card, so that you can also write as follows:\n\n```javascript\ndate.parse('12 hours 34 minutes', 'HH       mm        ');   // => Jan 1 1970 12:34:00 GMT-0800\n```\n\n---\n\n### preparse(dateString, formatString)\n*Pre-parsing a date string*\n- @param {**string**} dateString - a date string\n- @param {**string**} formatString - a format string\n- @returns {**Object**} a date structure\n\nThis function takes exactly the same parameters with the `parse()`, but instead it returns a date structure like this:\n\n```javascript\ndate.preparse('2015/01/02 23:14:05', 'YYYY/MM/DD HH:mm:ss');\n\n{\n    Y: 2015,        // Year\n    M: 1,           // Month\n    D: 2,           // Day\n    H: 23,          // 24-hour\n    A: 0,           // Meridiem\n    h: 0,           // 12-hour\n    m: 14,          // Minute\n    s: 5,           // Second\n    S: 0,           // Millisecond\n    _index: 19,     // Pointer offset\n    _length: 19,    // Length of the date string\n    _match: 6       // Token matching count\n}\n```\n\nThis object shows a parsing result. You can realize from it how the date string was parsed(, or why the parsing was failed).\n\n---\n\n### isValid(arg[, formatString])\n*Validation*\n- @param {**Object**|**string**} arg - a date structure or a date string\n- @param {**string**} [formatString] - a format string\n- @returns {**boolean**} whether the date string is a valid date\n\nThis function takes either exactly the same parameters with the `parse()` or a date structure which the `preparse()` returns, evaluates the validity of them.\n\n```javascript\ndate.isValid('2015/01/02 23:14:05', 'YYYY/MM/DD HH:mm:ss'); // => true\ndate.isValid('29-02-2015', 'DD-MM-YYYY');                   // => false\n\nconst result = date.preparse('2015/01/02 23:14:05', 'YYYY/MM/DD HH:mm:ss');\ndate.isValid(result);   // => true\n```\n\n---\n\n### addYears(dateObj, years)\n*Adding years*\n- @param {**Date**} dateObj - a Date object\n- @param {**number**} years - number of years to add\n- @returns {**Date**} a date after adding the value\n\n```javascript\nconst now = new Date();\nconst next_year = date.addYears(now, 1);  // => Date object\n```\n\n---\n\n### addMonths(dateObj, months)\n*Adding months*\n- @param {**Date**} dateObj - a Date object\n- @param {**number**} months - number of months to add\n- @returns {**Date**} a date after adding the value\n\n```javascript\nconst now = new Date();\nconst next_month = date.addMonths(now, 1);\n```\n\n---\n\n### addDays(dateObj, days)\n*Adding days*\n- @param {**Date**} dateObj - a Date object\n- @param {**number**} days - number of days to add\n- @returns {**Date**} a date after adding the value\n\n```javascript\nconst now = new Date();\nconst yesterday = date.addDays(now, -1);\n```\n\n---\n\n### addHours(dateObj, hours)\n*Adding hours*\n- @param {**Date**} dateObj - a Date object\n- @param {**number**} hours - number of hours to add\n- @returns {**Date**} a date after adding the value\n\n```javascript\nconst now = new Date();\nconst an_hour_ago = date.addHours(now, -1);\n```\n\n---\n\n### addMinutes(dateObj, minutes)\n*Adding minutes*\n- @param {**Date**} dateObj - a Date object\n- @param {**number**} minutes - number of minutes to add\n- @returns {**Date**} a date after adding the value\n\n```javascript\nconst now = new Date();\nconst two_minutes_later = date.addMinutes(now, 2);\n```\n\n---\n\n### addSeconds(dateObj, seconds)\n*Adding seconds*\n- @param {**Date**} dateObj - a Date object\n- @param {**number**} seconds - number of seconds to add\n- @returns {**Date**} a date after adding the value\n\n```javascript\nconst now = new Date();\nconst three_seconds_ago = date.addSeconds(now, -3);\n```\n\n---\n\n### addMilliseconds(dateObj, milliseconds)\n*Adding milliseconds*\n- @param {**Date**} dateObj - a Date object\n- @param {**number**} milliseconds - number of milliseconds to add\n- @returns {**Date**} a date after adding the value\n\n```javascript\nconst now = new Date();\nconst a_millisecond_later = date.addMilliseconds(now, 1);\n```\n\n---\n\n### subtract(date1, date2)\n*Subtracting*\n- @param {**Date**} date1 - a Date object\n- @param {**Date**} date2 - a Date object\n- @returns {**Object**} a result object subtracting date2 from date1\n\n```javascript\nconst today = new Date(2015, 0, 2);\nconst yesterday = new Date(2015, 0, 1);\n\ndate.subtract(today, yesterday).toDays();           // => 1 = today - yesterday\ndate.subtract(today, yesterday).toHours();          // => 24\ndate.subtract(today, yesterday).toMinutes();        // => 1440\ndate.subtract(today, yesterday).toSeconds();        // => 86400\ndate.subtract(today, yesterday).toMilliseconds();   // => 86400000\n```\n\n---\n\n### isLeapYear(y)\n*Leap year*\n- @param {**number**} y - year\n- @returns {**boolean**} whether the year is a leap year\n\n```javascript\nconst date1 = new Date(2015, 0, 2);\nconst date2 = new Date(2012, 0, 2);\ndate.isLeapYear(date1); // => false\ndate.isLeapYear(date2); // => true\n```\n\n---\n\n### isSameDay(date1, date2)\n*Comparison of two dates*\n- @param {**Date**} date1 - a Date object\n- @param {**Date**} date2 - a Date object\n- @returns {**boolean**} whether the dates are the same day (times are ignored)\n\n```javascript\nconst date1 = new Date(2017, 0, 2, 0);          // Jan 2 2017 00:00:00\nconst date2 = new Date(2017, 0, 2, 23, 59);     // Jan 2 2017 23:59:00\nconst date3 = new Date(2017, 0, 1, 23, 59);     // Jan 1 2017 23:59:00\ndate.isSameDay(date1, date2);   // => true\ndate.isSameDay(date1, date3);   // => false\n```\n\n---\n\n### locale([code])\n*Setting a locale*\n- @param {**string**} [code] - language code\n- @returns {**string**} current language code\n\nSee the `Locale` section for details.\n\n---\n\n### getLocales([code])\n*Getting a definition of locale*\n- @param {**string**} [code] - language code\n- @returns {**Object**} definition of locale\n\nSee the `Locale` section for details.\n\n---\n\n### setLocales(code, options)\n*Adding a new definition of locale*\n- @param {**string**} code - language code\n- @param {**Object**} options - definition of locale\n\nSee the `Locale` section for details.\n\n---\n\n## Locale\nAlthough month, day of week, and meridiem (am / pm) are displayed in English, you can switch to other languages as follows:  \n\nNode.js:\n```javascript\nconst date = require('date-and-time');\ndate.locale('fr');  // French\ndate.format(new Date(), 'dddd D MMMM'); // => 'lundi 11 janvier'\n```\n\nBabel:\n```javascript\nimport date from 'date-and-time';\nimport 'date-and-time/locale/it';\n\ndate.locale('it');  // Italian\ndate.format(new Date(), 'dddd D MMMM'); // => 'Lunedì 11 gennaio'\n```\n\nAMD:\n```javascript\nrequire(['date-and-time', 'locale/de'], function (date) {\n    date.locale('de');  // German\n    date.format(new Date(), 'dddd, D. MMMM');   // => 'Montag, 11. Januar'\n});\n```\n\nBrowser:\n```html\n<script src=\"date-and-time.min.js\"></script>\n<script src=\"locale/zh-cn.js\"></script>\n<script>\ndate.locale('zh-cn');  // Chinese\ndate.format(new Date(), 'MMMD日dddd');  // => '1月11日星期一'\n</script>\n```\n\nIt supports the following languages for now:  \n> Arabic (ar), Azerbaijani (az), Bengali (bn), Burmese (my), Chinese (zh-cn), Chinese (zh-tw), Czech (cs), Danish (dk), Dutch (nl), English (en), French (fr), German (de), Greek (el), Hindi (hi), Hungarian (hu), Indonesian (id), Italian (it), Japanese (ja), Javanese (jv), Korean (ko), Persian (fa), Polish (pl), Portuguese (pt), Punjabi (pa-in), Romanian (ro), Russian (ru), Serbian (sr), Spanish (es), Thai (th), Turkish (tr), Ukrainian (uk), Uzbek (uz), Vietnamese (vi)\n\n## Customizing\nIf you have some problems with the default translation, you could change them as you want:\n\n```javascript\nconst now = new Date();\ndate.format(now, 'h:m A');  // => '12:34 p.m.'\n\ndate.setLocales('en', {\n    A: ['AM', 'PM']\n});\n\ndate.format(now, 'h:m A');  // => '12:34 PM'\n```\nHowever, If **obviously** wrong, please send a PR or post the issue.  \n\n## Browser Support\nChrome, Firefox, Safari, Edge, and Internet Explorer 6+.\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/knowledgecode/date-and-time.git"
  },
  "scripts": {
    "compile": "./compile.sh date-and-time.js date-and-time.min.js",
    "test": "./test.sh"
  },
  "version": "0.8.1"
}
